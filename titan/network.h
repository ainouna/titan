#ifndef NETWORK_H
#define NETWORK_H

int writeinterfaces()
{
	char* savesettings = NULL;
	struct inetwork* net = inetwork;

	savesettings = ostrcat(savesettings, "# automatically generated by titan\n", 1, 0);
	savesettings = ostrcat(savesettings, "# do NOT change manually!\n", 1, 0);
	savesettings = ostrcat(savesettings, "\n", 1, 0);
	savesettings = ostrcat(savesettings, "auto lo\n", 1, 0);
	savesettings = ostrcat(savesettings, "iface lo inet loopback\n", 1, 0);

	while(net != NULL)
	{
		if(ostrncmp(net->device, "lo", 2) == 0)
		{
			net = net->next;
			continue;
		}
		if(net->dhcp == 0 && (net->ip == NULL || ostrcmp(net->ip, "000.000.000.000") == 0))
		{
			net = net->next;
			continue;
		}

		savesettings = ostrcat(savesettings, "\n", 1, 0);
		savesettings = ostrcat(savesettings, "auto ", 1, 0);
		savesettings = ostrcat(savesettings, net->device, 1, 0);
		savesettings = ostrcat(savesettings, "\n", 1, 0);

		savesettings = ostrcat(savesettings, "iface ", 1, 0);
		savesettings = ostrcat(savesettings, net->device, 1, 0);

		if(net->dhcp == 1)
			savesettings = ostrcat(savesettings, " inet dhcp\n", 1, 0);
		else
		{
			savesettings = ostrcat(savesettings, " inet static\n", 1, 0);

			savesettings = ostrcat(savesettings, "\taddress ", 1, 0);
			savesettings = ostrcat(savesettings, fixip(net->ip, 1), 1, 1);
			if(net->netmask != NULL && ostrcmp(net->netmask, "000.000.000.000") != 0)
			{
				savesettings = ostrcat(savesettings, "\n\tnetmask ", 1, 0);
				savesettings = ostrcat(savesettings, fixip(net->netmask, 1), 1, 1);
			}
			//if(net->broadcast != NULL && ostrcmp(net->broadcast, "000.000.000.000") != 0)
			//{
			//	savesettings = ostrcat(savesettings, "\n\tbroadcast ", 1, 0);
			//	savesettings = ostrcat(savesettings, fixip(net->broadcast, 1), 1, 1);
			//}
			if(status.gateway != NULL && ostrcmp(status.gateway, "000.000.000.000") != 0)
			{
				savesettings = ostrcat(savesettings, "\n\tgateway ", 1, 0);
				savesettings = ostrcat(savesettings, fixip(status.gateway, 1), 1, 1);
			}
			savesettings = ostrcat(savesettings, "\n", 1, 0);
		}

		if(net->dhcp == 0)
		{
			char* savedns = NULL;
			if(status.dnsserver1 != NULL && ostrcmp(status.dnsserver1, "000.000.000.000") != 0)
			{
				savedns = ostrcat(savedns, "nameserver ", 1, 0);
				savedns = ostrcat(savedns, fixip(status.dnsserver1, 1), 1, 1);
			}

			if(status.dnsserver2 != NULL && ostrcmp(status.dnsserver2, "000.000.000.000") != 0)
			{
				savedns = ostrcat(savedns, "\n", 1, 0);
				savedns = ostrcat(savedns, "nameserver ", 1, 0);
				savedns = ostrcat(savedns, fixip(status.dnsserver2, 1), 1, 1);
			}

			if(savedns != NULL)
			{
				debug(50, "[NETWORK] save resolv.conf: %s\n", savedns);
				FILE* fd1 = fopen("/var/etc/resolv.conf", "w");
				if(fd1)
				{
					fprintf(fd1, "%s\n", savedns);
					fclose(fd1);
				}
				free(savedns); savedns = NULL;
			}
		}
		net = net->next;
	}

	debug(50, "[NETWORK] save interfaces:\n %s", savesettings);

	FILE* fd = fopen("/var/etc/network/interfaces", "w");
	if(fd)
	{
		fprintf(fd, "%s\n", savesettings);
		fclose(fd);
	}
	free(savesettings); savesettings = NULL;

	return 0;
}

void screennetwork_test()
{
	int rcret = 0;
	struct skin* network = getscreen("network_test");
	struct skin* internet = getscreennode(network, "internet");
	struct skin* lan = getscreennode(network, "lan");
	char* tmpstr = NULL;
		
	drawscreen(network, 0);
	addscreenrc(network, lan);
	while(1)
	{
		rcret = waitrc(network, 0, 0);

		if(rcret == getrcconfigint("rcexit", NULL)) break;
		if(rcret == getrcconfigint("rcgreen", NULL))
		{
			tmpstr = ostrcat(tmpstr, "ping -c1 -W1 ", 1, 0);
			tmpstr = ostrcat(tmpstr, fixip(status.gateway, 1), 1, 0);
			free(lan->text); lan->text=NULL;
			if(system(tmpstr) == 0) 
				lan->text = ostrcat(lan->text, "OK", 1, 0);
			else
				lan->text = ostrcat(lan->text, "ERROR", 1, 0);
			free(tmpstr); tmpstr=NULL;
			tmpstr = ostrcat(tmpstr, "ping -c1 -W1 ", 1, 0);
			tmpstr = ostrcat(tmpstr, "www.google.de", 1, 0);
			free(internet->text); internet->text=NULL;
			if(system(tmpstr) == 0) 
				internet->text = ostrcat(internet->text, "OK", 1, 0);
			else
				internet->text = ostrcat(internet->text, "ERROR", 1, 0);
			free(tmpstr); tmpstr=NULL;
			drawscreen(network, 0);
		}
	}
	delownerrc(network);
	clearscreen(network);
}

void screennetwork(int mode)
{
	textbox(_("Network"), _("comming soon..."), _("OK"), getrcconfigint("rcok", NULL), _("EXIT"), getrcconfigint("rcexit", NULL), NULL, 0, NULL, 0, 800, 600, 0, 0);
}

void screennetwork_restart()
{
	char* tmpstr = NULL;

	if(textbox(_("Network"), _("Restart Network ?"), _("OK"), getrcconfigint("rcok", NULL), _("EXIT"), getrcconfigint("rcexit", NULL), NULL, 0, NULL, 0, 600, 200, 0, 0) == 1)
	{
		debug(10, "restart network");
		tmpstr = command("/etc/init.d/networking restart");
		textbox(_("Restart Network"), tmpstr, _("OK"), getrcconfigint("rcok", NULL), _("EXIT"), getrcconfigint("rcexit", NULL), NULL, 0, NULL, 0, 800, 600, 0, 0);
		free(tmpstr); tmpstr = NULL;
	}
}

//void nethidden(struct skin* ipaddresse, struct skin* netmask, struct skin* gateway, struct skin* dnsserver1, struct skin* dnsserver2, struct skin* broadcast, int type)
void nethidden(struct skin* ipaddresse, struct skin* netmask, struct skin* gateway, struct skin* dnsserver1, struct skin* dnsserver2, int type)
{
	ipaddresse->hidden = type;
	netmask->hidden = type;
	gateway->hidden = type;
	dnsserver1->hidden = type;
	dnsserver2->hidden = type;
	//broadcast->hidden = type;
}

void screennetwork_adapterext(int mode, char* interface)
{
	int rcret = 0;
	struct skin* network = getscreen("network");
	struct skin* listbox = getscreennode(network, "listbox");
	struct skin* dhcp = getscreennode(network, "dhcp");
	struct skin* ipaddresse = getscreennode(network, "ipaddresse");
	struct skin* netmask = getscreennode(network, "netmask");
	struct skin* gateway = getscreennode(network, "gateway");
	struct skin* dnsserver1 = getscreennode(network, "dnsserver1");
	struct skin* dnsserver2 = getscreennode(network, "dnsserver2");
	//struct skin* broadcast = getscreennode(network, "broadcast");
	struct inetwork* net = getinetworkbydevice(interface);

	struct skin* tmp = NULL;

	if(net == NULL)
		return;

	char* tmp_ipaddresse = net->ip;
	char* tmp_netmask = net->netmask;
	char* tmp_gateway = status.gateway;
	char* tmp_dnsserver1 = status.dnsserver1;
	char* tmp_dnsserver2 = status.dnsserver2;
	//char* tmp_broadcast = net->broadcast;
	int tmp_dhcp = net->dhcp;

	changemask(ipaddresse, "000.000.000.000");
	changeinput(ipaddresse, net->ip);

	changemask(netmask, "000.000.000.000");
	changeinput(netmask, net->netmask);

	changemask(gateway, "000.000.000.000");
	changeinput(gateway, status.gateway);

	changemask(dnsserver1, "000.000.000.000");
	changeinput(dnsserver1, status.dnsserver1);

	changemask(dnsserver2, "000.000.000.000");
	changeinput(dnsserver2, status.dnsserver2);

	//changemask(broadcast, "000.000.000.000");
	//changeinput(broadcast, net->broadcast);

	if(net->dhcp)
	{
		addchoicebox(dhcp, "1", _("enable"));
		addchoicebox(dhcp, "0", _("disable"));
		//nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, broadcast, YES);
		nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, YES);
	}
	else
	{
		addchoicebox(dhcp, "0", _("disable"));
		addchoicebox(dhcp, "1", _("enable"));
		//nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, broadcast, NO);
		nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, NO);
	}

	listbox->aktline = 1;

	drawscreen(network, 0);
	addscreenrc(network, listbox);

	int save = 0;
	struct skin* child = NULL;

	tmp = listbox->select;
	while(1)
	{
		addscreenrc(network, tmp);
		rcret = waitrc(network, 0, 0);
		tmp = listbox->select;

		//printf("listbox->select->text: %s\n", listbox->select->text);

		if(rcret == getrcconfigint("rcexit", NULL)) break;
		if(rcret == getrcconfigint("rcred", NULL))
		{
			if(textbox(_("Message"), _("save network settings ?"), _("OK"), getrcconfigint("rcok", NULL), _("EXIT"), getrcconfigint("rcexit", NULL), NULL, 0, NULL, 0, 600, 200, 0, 0) == 1)
			{
				debug(10, "save network settings");
				save = 1;
				break;
			}
			drawscreen(network, 0);
		}

		if(listbox->select != NULL)
		{
			if(ostrcmp(listbox->select->name, "dhcp") == 0)
			{
				child = listbox->select->next;

				if(atoi(listbox->select->ret) == 0)
					//nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, broadcast, NO);
					nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, NO);
				else
					//nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, broadcast, YES);
					nethidden(ipaddresse, netmask, gateway, dnsserver1, dnsserver2, YES);

				drawscreen(network, 0);
				tmp_dhcp = atoi(listbox->select->ret);
			}
			else if(ostrcmp(listbox->select->name, "ipaddresse") == 0)
				tmp_ipaddresse = listbox->select->ret;
			else if(ostrcmp(listbox->select->name, "netmask") == 0)
				tmp_netmask = listbox->select->ret;
			else if(ostrcmp(listbox->select->name, "gateway") == 0)
				tmp_gateway = listbox->select->ret;
			else if(ostrcmp(listbox->select->name, "dnsserver1") == 0)
				tmp_dnsserver1 = listbox->select->ret;
			else if(ostrcmp(listbox->select->name, "dnsserver2") == 0)
				tmp_dnsserver2 = listbox->select->ret;
			//else if(ostrcmp(listbox->select->name, "broadcast") == 0)
			//	tmp_broadcast = listbox->select->ret;
		}
	}

	if(save == 1)
	{
		debug(50, "save settings");
		debug(50, "dhcp: %i", tmp_dhcp);
		debug(50, "ipaddresse: %s", tmp_ipaddresse);
		debug(50, "netmask: %s", tmp_netmask);
		debug(50, "gateway: %s", tmp_gateway);
		debug(50, "dnsserver1: %s", tmp_dnsserver1);
		debug(50, "dnsserver2: %s", tmp_dnsserver2);
		//debug(50, "broadcast: %s", tmp_broadcast);

		if(net->ip != tmp_ipaddresse)
		{
			free(net->ip);
			net->ip = ostrcat(tmp_ipaddresse, "", 0, 0);
		}
		if(net->netmask != tmp_netmask)
		{
			free(net->netmask);
			net->netmask = ostrcat(tmp_netmask, "", 0, 0);
		}
		if(status.gateway != tmp_gateway)
		{
			free(status.gateway);
			status.gateway = ostrcat(tmp_gateway, "", 0, 0);
		}
		if(status.dnsserver1 != tmp_dnsserver1)
		{
			free(status.dnsserver1);
			status.dnsserver1 = ostrcat(tmp_dnsserver1, "", 0, 0);
		}
		if(status.dnsserver2 != tmp_dnsserver2)
		{
			free(status.dnsserver2);
			status.dnsserver2 = ostrcat(tmp_dnsserver2, "", 0, 0);
		}
		//if(net->broadcast != tmp_broadcast)
		//{
		//	free(net->broadcast);
		//	net->broadcast = ostrcat(tmp_broadcast, "", 0, 0);
		//}
		net->dhcp = tmp_dhcp;

		writeinterfaces();
		screennetwork_restart();
	}

	delownerrc(network);
	clearscreen(network);
}

void screennetwork_adapter()
{
	int rcret = 0, mode = 0;
	struct skin* interfacelist = getscreen("interfacelist");
	struct skin* listbox = getscreennode(interfacelist, "listbox");
	struct inetwork* inetworknode = NULL;
	struct skin* tmp = NULL;
	char* tmpstr = NULL;

start:
	tmp = NULL;
	listbox->aktpage = -1;
	listbox->aktline = 1;
	listbox->select = NULL;
	inetworknode = inetwork;

	while(inetworknode != NULL)
	{
		if(ostrncmp(inetworknode->device, "lo", 2) == 0)
		{
			inetworknode = inetworknode->next;
			continue;
		}
		tmp = addlistbox(interfacelist, listbox, tmp, 1);
		if(tmp != NULL)
		{
			tmpstr = ostrcat(inetworknode->device, " (", 0, 0);
			tmpstr = ostrcat(tmpstr, inetworknode->ip, 1, 0);
			tmpstr = ostrcat(tmpstr, ")", 1, 0);
			changetext(tmp, tmpstr);
			free(tmpstr); tmpstr = NULL;
			tmp->handle = inetworknode->device;
		}
		inetworknode = inetworknode->next;
	}

	drawscreen(interfacelist, 0);
	addscreenrc(interfacelist, listbox);

	tmp = listbox->select;
	while(1)
	{
		addscreenrc(interfacelist, tmp);
		rcret = waitrc(interfacelist, 0, 0);
		tmp = listbox->select;

		if(rcret == getrcconfigint("rcexit", NULL)) break;
		if(listbox->select != NULL)
		{
			if(rcret == getrcconfigint("rcok", NULL))
			{
				clearscreen(interfacelist);
				screennetwork_adapterext(mode, listbox->select->handle);
				delmarkedscreennodes(interfacelist, 1);
				goto start;
			}
		}
	}

	delmarkedscreennodes(interfacelist, 1);
	delownerrc(interfacelist);
	clearscreen(interfacelist);
}

#endif
